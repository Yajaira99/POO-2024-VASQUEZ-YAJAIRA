import os

class Producto:
    def __init__(self, id_producto, nombre, cantidad, precio):
        # Inicializa un objeto Producto con los detalles proporcionados.
        self.id_producto = id_producto
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    def __str__(self):
        # Devuelve una representación en cadena del producto.
        return f"{self.nombre}, Cantidad: {self.cantidad}, Precio: ${self.precio}"
    
    def to_string(self):
        # Devuelve una cadena que representa el producto en formato CSV para almacenamiento en archivos.
        return f"{self.id_producto},{self.nombre},{self.cantidad},{self.precio}"

class Inventario:
    def __init__(self, archivo='inventario.txt'):
        # Inicializa el inventario y carga los productos desde un archivo.
        self.archivo = archivo
        self.productos = {}
        self.cargar_inventario()

    def agregar_producto(self, producto):
        # Agrega un producto al inventario y guarda los cambios en el archivo.
        if producto.id_producto in self.productos:
            print("Error: Producto ya existe.")
        else:
            self.productos[producto.id_producto] = producto
            self.guardar_inventario()
            print("Producto agregado exitosamente.")

    def eliminar_producto(self, id_producto):
        # Elimina un producto del inventario y guarda los cambios en el archivo.
        if id_producto in self.productos:
            del self.productos[id_producto]
            self.guardar_inventario()
            print("Producto eliminado exitosamente.")
        else:
            print("Error: Producto no encontrado.")

    def actualizar_producto(self, id_producto, cantidad=None, precio=None):
        # Actualiza la cantidad y/o el precio de un producto existente y guarda los cambios en el archivo.
        if id_producto in self.productos:
            if cantidad is not None:
                self.productos[id_producto].cantidad = cantidad
            if precio is not None:
                self.productos[id_producto].precio = precio
            self.guardar_inventario()
            print("Producto actualizado exitosamente.")
        else:
            print("Error: Producto no encontrado.")

    def buscar_producto(self, nombre):
        # Busca productos cuyo nombre contenga el texto especificado e imprime los resultados.
        encontrados = [producto for producto in self.productos.values() if nombre.lower() in producto.nombre.lower()]
        if encontrados:
            for producto in encontrados:
                print(producto)
        else:
            print("No se encontraron productos.")

    def mostrar_inventario(self):
        # Muestra todos los productos en el inventario.
        if self.productos:
            for producto in self.productos.values():
                print(producto)
        else:
            print("El inventario está vacío.")

    def cargar_inventario(self):
        # Carga los productos desde el archivo y los agrega al inventario.
        if os.path.exists(self.archivo):
            try:
                with open(self.archivo, 'r') as file:
                    for linea in file:
                        id_producto, nombre, cantidad, precio = linea.strip().split(',')
                        producto = Producto(id_producto, nombre, int(cantidad), float(precio))
                        self.productos[id_producto] = producto
            except FileNotFoundError:
                print("Archivo de inventario no encontrado, creando uno nuevo.")
            except Exception as e:
                print(f"Error al cargar inventario: {e}")
        else:
            print("Archivo de inventario no existe, se creará uno nuevo.")

    def guardar_inventario(self):
        # Guarda todos los productos del inventario en el archivo.
        try:
            with open(self.archivo, 'w') as file:
                for producto in self.productos.values():
                    file.write(producto.to_string() + '\n')
        except PermissionError:
            print("Error: Permiso denegado para escribir en el archivo.")
        except Exception as e:
            print(f"Error al guardar inventario: {e}")

def menu():
    # Función principal que muestra el menú y maneja la entrada del usuario.
    inventario = Inventario()
    while True:
        print("\n1. Agregar Producto\n2. Eliminar Producto\n3. Actualizar Producto\n4. Buscar Producto\n5. Mostrar Inventario\n6. Salir")
        opcion = input("Seleccione una opción: ")
        if opcion == '6':
            break
        elif opcion == '1':
            # Agrega un nuevo producto al inventario.
            id_producto = input("Ingrese el ID del producto: ")
            nombre = input("Ingrese el nombre del producto: ")
            cantidad = int(input("Ingrese la cantidad del producto: "))
            precio = float(input("Ingrese el precio del producto: "))
            producto = Producto(id_producto, nombre, cantidad, precio)
            inventario.agregar_producto(producto)
        elif opcion == '2':
            # Elimina un producto del inventario por ID.
            id_producto = input("Ingrese el ID del producto a eliminar: ")
            inventario.eliminar_producto(id_producto)
        elif opcion == '3':
            # Actualiza la cantidad y/o precio de un producto existente.
            id_producto = input("Ingrese el ID del producto a actualizar: ")
            cantidad = input("Ingrese la nueva cantidad (deje en blanco si no desea cambiarla): ")
            precio = input("Ingrese el nuevo precio (deje en blanco si no desea cambiarlo): ")
            cantidad = int(cantidad) if cantidad else None
            precio = float(precio) if precio else None
            inventario.actualizar_producto(id_producto, cantidad, precio)
        elif opcion == '4':
            # Busca y muestra productos que coincidan con el nombre proporcionado.
            nombre = input("Ingrese el nombre del producto a buscar: ")
            inventario.buscar_producto(nombre)
        elif opcion == '5':
            # Muestra todos los productos en el inventario.
            inventario.mostrar_inventario()
        else:
            print("Opción no válida. Intente de nuevo.")

if __name__ == "__main__":
    menu()
